apiVersion: v1
kind: Template
metadata:
  annotations:
    description: Staytus monitoring app
    tags: instant-app
  name: staytus
objects:
- apiVersion: v1
  kind: BuildConfig
  labels:
    application: ${APPLICATION_NAME}
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: ruby:2.3
      type: Source
    triggers:
    - github:
        secret: ${WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${WEBHOOK_SECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  data:
    database.yml: |
      # Database configuration for Staytus.
      #
      # By default, Staytus works with a MySQL database. While
      # it may work with other engines, they are untested and
      # currently unsupported. You can make changes to this file
      # to specify the database to connect to.

      default: &default
        adapter: mysql2
        encoding: utf8
        pool: 5
        username: ${MYSQL_USER}
        password: ${MYSQL_PASSWORD}
        database: ${MYSQL_DATABASE}
        host: mysql

      production:
        <<: *default

      development:
        <<: *default

      test:
        <<: *default
        database: staytus_test
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.s3.image.entrypoint: '["container-entrypoint","/bin/sh","-c","$STI_SCRIPTS_PATH/usage"]'
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
          image: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              memory: 1500Mi
          volumeMounts:
            -
              name: config
              mountPath: /config
        volumes:
          -
            name: config
            configMap:
              name: ${APPLICATION_NAME}
              items:
              - key: database.yml
                path: database.yml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ruby:2.3
  spec:
    tags:
      from:
        kind: DockerImage
        name: ruby:2.3
      name: "2.3"
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: mysql
    name: mysql
  spec:
    replicas: 1
    selector:
      app: mysql
      deploymentconfig: mysql
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/container.mysql.image.entrypoint: '["container-entrypoint","run-mysqld"]'
        labels:
          app: mysql
          deploymentconfig: mysql
      spec:
        containers:
        - image: openshift/mysql:5.6
          env:
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: WORDPRESS_DB_HOST
            value: mysql
          - name: WORDPRESS_DB_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: WORDPRESS_DB_NAME
            value: ${MYSQL_DATABASE}
          - name: WORDPRESS_DB_USER
            value: ${MYSQL_USER}
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          resources: {}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: mysql-volume-1
        volumes:
        - name: mysql-volume-1
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-mysql-pvclaim
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:5.6
          namespace: openshift
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: mysql
    name: mysql
  spec:
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      app: mysql
      deploymentconfig: mysql
  status:
    loadBalancer: {}
parameters:
- description: The name assigned to all of the objects defined in this template.
  displayName: APPLICATION_NAME
  name: APPLICATION_NAME
  required: true
  value: s3-server
- description: The name of your project
  displayName: PROJECT_NAME
  name: PROJECT_NAME
  required: true
  value: staytus2
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/cyril-dussert/staytus.git
- description: A secret string used to configure the Git webhook.
  displayName: Git Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: WEBHOOK_SECRET
- description: "Username of database account"
  displayName: MYSQL_USER
  name: MYSQL_USER
  required: true
  value: staytus
- description: "Name of database"
  displayName: MYSQL_DATABASE
  name: MYSQL_DATABASE
  required: true
  value: staytus
- description: "Password for database account"
  displayName: MYSQL_PASSWORD
  from: "[a-zA-Z0-9]{15}"
  generate: expression
  name: MYSQL_PASSWORD
  required: true
message: "The webhook secret is ${WEBHOOK_SECRET}."